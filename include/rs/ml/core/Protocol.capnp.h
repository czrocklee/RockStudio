// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Protocol.capnp

#ifndef CAPNP_INCLUDED_8e501efc7848a202_
#define CAPNP_INCLUDED_8e501efc7848a202_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fb74f2ecbc1c041b);
CAPNP_DECLARE_SCHEMA(f508e7d9a40a1f3b);
CAPNP_DECLARE_SCHEMA(8a8395a7f0227a8f);

}  // namespace schemas
}  // namespace capnp

namespace rs {
namespace ml {
namespace core {

struct AudioSource {
  AudioSource() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb74f2ecbc1c041b, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Classical {
  Classical() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f508e7d9a40a1f3b, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Track {
  Track() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a8395a7f0227a8f, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class AudioSource::Reader {
public:
  typedef AudioSource Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasFilePath() const;
  inline  ::capnp::Text::Reader getFilePath() const;

  inline  ::uint64_t getLastModified() const;

  inline  ::uint32_t getLength() const;

  inline  ::uint32_t getBitRate() const;

  inline  ::uint32_t getSampleRate() const;

  inline  ::uint8_t getBitDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AudioSource::Builder {
public:
  typedef AudioSource Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFilePath();
  inline  ::capnp::Text::Builder getFilePath();
  inline void setFilePath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFilePath(unsigned int size);
  inline void adoptFilePath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFilePath();

  inline  ::uint64_t getLastModified();
  inline void setLastModified( ::uint64_t value);

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

  inline  ::uint32_t getBitRate();
  inline void setBitRate( ::uint32_t value);

  inline  ::uint32_t getSampleRate();
  inline void setSampleRate( ::uint32_t value);

  inline  ::uint8_t getBitDepth();
  inline void setBitDepth( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AudioSource::Pipeline {
public:
  typedef AudioSource Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Classical::Reader {
public:
  typedef Classical Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasComposer() const;
  inline  ::capnp::Text::Reader getComposer() const;

  inline bool hasConductor() const;
  inline  ::capnp::Text::Reader getConductor() const;

  inline bool hasOrchestra() const;
  inline  ::capnp::Text::Reader getOrchestra() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Classical::Builder {
public:
  typedef Classical Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasComposer();
  inline  ::capnp::Text::Builder getComposer();
  inline void setComposer( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initComposer(unsigned int size);
  inline void adoptComposer(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownComposer();

  inline bool hasConductor();
  inline  ::capnp::Text::Builder getConductor();
  inline void setConductor( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initConductor(unsigned int size);
  inline void adoptConductor(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownConductor();

  inline bool hasOrchestra();
  inline  ::capnp::Text::Builder getOrchestra();
  inline void setOrchestra( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOrchestra(unsigned int size);
  inline void adoptOrchestra(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOrchestra();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Classical::Pipeline {
public:
  typedef Classical Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Track::Reader {
public:
  typedef Track Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasArtist() const;
  inline  ::capnp::Text::Reader getArtist() const;

  inline bool hasAlbum() const;
  inline  ::capnp::Text::Reader getAlbum() const;

  inline bool hasAlbumArtist() const;
  inline  ::capnp::Text::Reader getAlbumArtist() const;

  inline bool hasGenre() const;
  inline  ::capnp::Text::Reader getGenre() const;

  inline  ::uint16_t getTrackNumber() const;

  inline  ::uint16_t getTotalTracks() const;

  inline  ::uint16_t getDiskNumber() const;

  inline  ::uint16_t getTotalDisks() const;

  inline bool hasClassical() const;
  inline  ::rs::ml::core::Classical::Reader getClassical() const;

  inline bool hasSource() const;
  inline  ::rs::ml::core::AudioSource::Reader getSource() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Track::Builder {
public:
  typedef Track Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasArtist();
  inline  ::capnp::Text::Builder getArtist();
  inline void setArtist( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initArtist(unsigned int size);
  inline void adoptArtist(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownArtist();

  inline bool hasAlbum();
  inline  ::capnp::Text::Builder getAlbum();
  inline void setAlbum( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlbum(unsigned int size);
  inline void adoptAlbum(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlbum();

  inline bool hasAlbumArtist();
  inline  ::capnp::Text::Builder getAlbumArtist();
  inline void setAlbumArtist( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAlbumArtist(unsigned int size);
  inline void adoptAlbumArtist(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAlbumArtist();

  inline bool hasGenre();
  inline  ::capnp::Text::Builder getGenre();
  inline void setGenre( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGenre(unsigned int size);
  inline void adoptGenre(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGenre();

  inline  ::uint16_t getTrackNumber();
  inline void setTrackNumber( ::uint16_t value);

  inline  ::uint16_t getTotalTracks();
  inline void setTotalTracks( ::uint16_t value);

  inline  ::uint16_t getDiskNumber();
  inline void setDiskNumber( ::uint16_t value);

  inline  ::uint16_t getTotalDisks();
  inline void setTotalDisks( ::uint16_t value);

  inline bool hasClassical();
  inline  ::rs::ml::core::Classical::Builder getClassical();
  inline void setClassical( ::rs::ml::core::Classical::Reader value);
  inline  ::rs::ml::core::Classical::Builder initClassical();
  inline void adoptClassical(::capnp::Orphan< ::rs::ml::core::Classical>&& value);
  inline ::capnp::Orphan< ::rs::ml::core::Classical> disownClassical();

  inline bool hasSource();
  inline  ::rs::ml::core::AudioSource::Builder getSource();
  inline void setSource( ::rs::ml::core::AudioSource::Reader value);
  inline  ::rs::ml::core::AudioSource::Builder initSource();
  inline void adoptSource(::capnp::Orphan< ::rs::ml::core::AudioSource>&& value);
  inline ::capnp::Orphan< ::rs::ml::core::AudioSource> disownSource();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Track::Pipeline {
public:
  typedef Track Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::rs::ml::core::Classical::Pipeline getClassical();
  inline  ::rs::ml::core::AudioSource::Pipeline getSource();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool AudioSource::Reader::hasFilePath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool AudioSource::Builder::hasFilePath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AudioSource::Reader::getFilePath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AudioSource::Builder::getFilePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void AudioSource::Builder::setFilePath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AudioSource::Builder::initFilePath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void AudioSource::Builder::adoptFilePath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AudioSource::Builder::disownFilePath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t AudioSource::Reader::getLastModified() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t AudioSource::Builder::getLastModified() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void AudioSource::Builder::setLastModified( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AudioSource::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t AudioSource::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void AudioSource::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AudioSource::Reader::getBitRate() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t AudioSource::Builder::getBitRate() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void AudioSource::Builder::setBitRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AudioSource::Reader::getSampleRate() const {
  return _reader.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint32_t AudioSource::Builder::getSampleRate() {
  return _builder.getDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void AudioSource::Builder::setSampleRate( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t AudioSource::Reader::getBitDepth() const {
  return _reader.getDataField< ::uint8_t>(
      20 * ::capnp::ELEMENTS);
}

inline  ::uint8_t AudioSource::Builder::getBitDepth() {
  return _builder.getDataField< ::uint8_t>(
      20 * ::capnp::ELEMENTS);
}
inline void AudioSource::Builder::setBitDepth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      20 * ::capnp::ELEMENTS, value);
}

inline bool Classical::Reader::hasComposer() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Classical::Builder::hasComposer() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Classical::Reader::getComposer() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Classical::Builder::getComposer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Classical::Builder::setComposer( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Classical::Builder::initComposer(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Classical::Builder::adoptComposer(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Classical::Builder::disownComposer() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Classical::Reader::hasConductor() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Classical::Builder::hasConductor() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Classical::Reader::getConductor() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Classical::Builder::getConductor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Classical::Builder::setConductor( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Classical::Builder::initConductor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Classical::Builder::adoptConductor(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Classical::Builder::disownConductor() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Classical::Reader::hasOrchestra() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Classical::Builder::hasOrchestra() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Classical::Reader::getOrchestra() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Classical::Builder::getOrchestra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Classical::Builder::setOrchestra( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Classical::Builder::initOrchestra(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Classical::Builder::adoptOrchestra(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Classical::Builder::disownOrchestra() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasTitle() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasTitle() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Track::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Track::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Track::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Track::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Track::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Track::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasArtist() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasArtist() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Track::Reader::getArtist() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Track::Builder::getArtist() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Track::Builder::setArtist( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Track::Builder::initArtist(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Track::Builder::adoptArtist(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Track::Builder::disownArtist() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasAlbum() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasAlbum() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Track::Reader::getAlbum() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Track::Builder::getAlbum() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Track::Builder::setAlbum( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Track::Builder::initAlbum(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Track::Builder::adoptAlbum(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Track::Builder::disownAlbum() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasAlbumArtist() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasAlbumArtist() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Track::Reader::getAlbumArtist() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Track::Builder::getAlbumArtist() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Track::Builder::setAlbumArtist( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Track::Builder::initAlbumArtist(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Track::Builder::adoptAlbumArtist(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Track::Builder::disownAlbumArtist() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasGenre() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasGenre() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Track::Reader::getGenre() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Track::Builder::getGenre() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Track::Builder::setGenre( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Track::Builder::initGenre(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Track::Builder::adoptGenre(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Track::Builder::disownGenre() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::uint16_t Track::Reader::getTrackNumber() const {
  return _reader.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Track::Builder::getTrackNumber() {
  return _builder.getDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Track::Builder::setTrackNumber( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Track::Reader::getTotalTracks() const {
  return _reader.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Track::Builder::getTotalTracks() {
  return _builder.getDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Track::Builder::setTotalTracks( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Track::Reader::getDiskNumber() const {
  return _reader.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Track::Builder::getDiskNumber() {
  return _builder.getDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Track::Builder::setDiskNumber( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Track::Reader::getTotalDisks() const {
  return _reader.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint16_t Track::Builder::getTotalDisks() {
  return _builder.getDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Track::Builder::setTotalDisks( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool Track::Reader::hasClassical() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasClassical() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::rs::ml::core::Classical::Reader Track::Reader::getClassical() const {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::rs::ml::core::Classical::Builder Track::Builder::getClassical() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rs::ml::core::Classical::Pipeline Track::Pipeline::getClassical() {
  return  ::rs::ml::core::Classical::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Track::Builder::setClassical( ::rs::ml::core::Classical::Reader value) {
  ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::rs::ml::core::Classical::Builder Track::Builder::initClassical() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Track::Builder::adoptClassical(
    ::capnp::Orphan< ::rs::ml::core::Classical>&& value) {
  ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rs::ml::core::Classical> Track::Builder::disownClassical() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::Classical>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Track::Reader::hasSource() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Track::Builder::hasSource() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::rs::ml::core::AudioSource::Reader Track::Reader::getSource() const {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::rs::ml::core::AudioSource::Builder Track::Builder::getSource() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::rs::ml::core::AudioSource::Pipeline Track::Pipeline::getSource() {
  return  ::rs::ml::core::AudioSource::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Track::Builder::setSource( ::rs::ml::core::AudioSource::Reader value) {
  ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::rs::ml::core::AudioSource::Builder Track::Builder::initSource() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Track::Builder::adoptSource(
    ::capnp::Orphan< ::rs::ml::core::AudioSource>&& value) {
  ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::rs::ml::core::AudioSource> Track::Builder::disownSource() {
  return ::capnp::_::PointerHelpers< ::rs::ml::core::AudioSource>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_8e501efc7848a202_
