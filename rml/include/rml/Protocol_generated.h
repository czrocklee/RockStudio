// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_RML_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_RML_H_

#include "flatbuffers/flatbuffers.h"

namespace rml {

struct MetaData;

struct Index;

struct Track;

MANUALLY_ALIGNED_STRUCT(2) Index FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t trackNumber_;
  uint16_t totalTracks_;
  uint16_t discNumber_;
  uint16_t totalDiscs_;

 public:
  Index() {
    memset(this, 0, sizeof(Index));
  }
  Index(const Index &_o) {
    memcpy(this, &_o, sizeof(Index));
  }
  Index(uint16_t _trackNumber, uint16_t _totalTracks, uint16_t _discNumber, uint16_t _totalDiscs)
      : trackNumber_(flatbuffers::EndianScalar(_trackNumber)),
        totalTracks_(flatbuffers::EndianScalar(_totalTracks)),
        discNumber_(flatbuffers::EndianScalar(_discNumber)),
        totalDiscs_(flatbuffers::EndianScalar(_totalDiscs)) {
  }
  uint16_t trackNumber() const {
    return flatbuffers::EndianScalar(trackNumber_);
  }
  uint16_t totalTracks() const {
    return flatbuffers::EndianScalar(totalTracks_);
  }
  uint16_t discNumber() const {
    return flatbuffers::EndianScalar(discNumber_);
  }
  uint16_t totalDiscs() const {
    return flatbuffers::EndianScalar(totalDiscs_);
  }
};
STRUCT_END(Index, 8);

struct MetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FILEPATH = 4,
    VT_LASTMODIFIED = 6,
    VT_CHECKSUM = 8
  };
  const flatbuffers::String *filepath() const {
    return GetPointer<const flatbuffers::String *>(VT_FILEPATH);
  }
  uint64_t lastModified() const {
    return GetField<uint64_t>(VT_LASTMODIFIED, 0);
  }
  const flatbuffers::Vector<uint8_t> *checkSum() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CHECKSUM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FILEPATH) &&
           verifier.Verify(filepath()) &&
           VerifyField<uint64_t>(verifier, VT_LASTMODIFIED) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CHECKSUM) &&
           verifier.Verify(checkSum()) &&
           verifier.EndTable();
  }
};

struct MetaDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_filepath(flatbuffers::Offset<flatbuffers::String> filepath) {
    fbb_.AddOffset(MetaData::VT_FILEPATH, filepath);
  }
  void add_lastModified(uint64_t lastModified) {
    fbb_.AddElement<uint64_t>(MetaData::VT_LASTMODIFIED, lastModified, 0);
  }
  void add_checkSum(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> checkSum) {
    fbb_.AddOffset(MetaData::VT_CHECKSUM, checkSum);
  }
  MetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MetaDataBuilder &operator=(const MetaDataBuilder &);
  flatbuffers::Offset<MetaData> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<MetaData>(end);
    return o;
  }
};

inline flatbuffers::Offset<MetaData> CreateMetaData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> filepath = 0,
    uint64_t lastModified = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> checkSum = 0) {
  MetaDataBuilder builder_(_fbb);
  builder_.add_lastModified(lastModified);
  builder_.add_checkSum(checkSum);
  builder_.add_filepath(filepath);
  return builder_.Finish();
}

inline flatbuffers::Offset<MetaData> CreateMetaDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *filepath = nullptr,
    uint64_t lastModified = 0,
    const std::vector<uint8_t> *checkSum = nullptr) {
  return rml::CreateMetaData(
      _fbb,
      filepath ? _fbb.CreateString(filepath) : 0,
      lastModified,
      checkSum ? _fbb.CreateVector<uint8_t>(*checkSum) : 0);
}

struct Track FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TITLE = 4,
    VT_ARTIST = 6,
    VT_ALBUM = 8,
    VT_ALBUMARTIST = 10,
    VT_INDEX = 12,
    VT_METADATA = 14,
    VT_EXTRAARTISTS = 16,
    VT_EXTRAMETADATA = 18
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *artist() const {
    return GetPointer<const flatbuffers::String *>(VT_ARTIST);
  }
  const flatbuffers::String *album() const {
    return GetPointer<const flatbuffers::String *>(VT_ALBUM);
  }
  const flatbuffers::String *albumArtist() const {
    return GetPointer<const flatbuffers::String *>(VT_ALBUMARTIST);
  }
  const Index *index() const {
    return GetStruct<const Index *>(VT_INDEX);
  }
  const MetaData *metaData() const {
    return GetPointer<const MetaData *>(VT_METADATA);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *extraArtists() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_EXTRAARTISTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MetaData>> *extraMetaData() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MetaData>> *>(VT_EXTRAMETADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TITLE) &&
           verifier.Verify(title()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ARTIST) &&
           verifier.Verify(artist()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ALBUM) &&
           verifier.Verify(album()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ALBUMARTIST) &&
           verifier.Verify(albumArtist()) &&
           VerifyField<Index>(verifier, VT_INDEX) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_METADATA) &&
           verifier.VerifyTable(metaData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EXTRAARTISTS) &&
           verifier.Verify(extraArtists()) &&
           verifier.VerifyVectorOfStrings(extraArtists()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_EXTRAMETADATA) &&
           verifier.Verify(extraMetaData()) &&
           verifier.VerifyVectorOfTables(extraMetaData()) &&
           verifier.EndTable();
  }
};

struct TrackBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(Track::VT_TITLE, title);
  }
  void add_artist(flatbuffers::Offset<flatbuffers::String> artist) {
    fbb_.AddOffset(Track::VT_ARTIST, artist);
  }
  void add_album(flatbuffers::Offset<flatbuffers::String> album) {
    fbb_.AddOffset(Track::VT_ALBUM, album);
  }
  void add_albumArtist(flatbuffers::Offset<flatbuffers::String> albumArtist) {
    fbb_.AddOffset(Track::VT_ALBUMARTIST, albumArtist);
  }
  void add_index(const Index *index) {
    fbb_.AddStruct(Track::VT_INDEX, index);
  }
  void add_metaData(flatbuffers::Offset<MetaData> metaData) {
    fbb_.AddOffset(Track::VT_METADATA, metaData);
  }
  void add_extraArtists(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> extraArtists) {
    fbb_.AddOffset(Track::VT_EXTRAARTISTS, extraArtists);
  }
  void add_extraMetaData(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MetaData>>> extraMetaData) {
    fbb_.AddOffset(Track::VT_EXTRAMETADATA, extraMetaData);
  }
  TrackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TrackBuilder &operator=(const TrackBuilder &);
  flatbuffers::Offset<Track> Finish() {
    const auto end = fbb_.EndTable(start_, 8);
    auto o = flatbuffers::Offset<Track>(end);
    return o;
  }
};

inline flatbuffers::Offset<Track> CreateTrack(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> artist = 0,
    flatbuffers::Offset<flatbuffers::String> album = 0,
    flatbuffers::Offset<flatbuffers::String> albumArtist = 0,
    const Index *index = 0,
    flatbuffers::Offset<MetaData> metaData = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> extraArtists = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MetaData>>> extraMetaData = 0) {
  TrackBuilder builder_(_fbb);
  builder_.add_extraMetaData(extraMetaData);
  builder_.add_extraArtists(extraArtists);
  builder_.add_metaData(metaData);
  builder_.add_index(index);
  builder_.add_albumArtist(albumArtist);
  builder_.add_album(album);
  builder_.add_artist(artist);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<Track> CreateTrackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *artist = nullptr,
    const char *album = nullptr,
    const char *albumArtist = nullptr,
    const Index *index = 0,
    flatbuffers::Offset<MetaData> metaData = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *extraArtists = nullptr,
    const std::vector<flatbuffers::Offset<MetaData>> *extraMetaData = nullptr) {
  return rml::CreateTrack(
      _fbb,
      title ? _fbb.CreateString(title) : 0,
      artist ? _fbb.CreateString(artist) : 0,
      album ? _fbb.CreateString(album) : 0,
      albumArtist ? _fbb.CreateString(albumArtist) : 0,
      index,
      metaData,
      extraArtists ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*extraArtists) : 0,
      extraMetaData ? _fbb.CreateVector<flatbuffers::Offset<MetaData>>(*extraMetaData) : 0);
}

inline const rml::Track *GetTrack(const void *buf) {
  return flatbuffers::GetRoot<rml::Track>(buf);
}

inline bool VerifyTrackBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rml::Track>(nullptr);
}

inline void FinishTrackBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rml::Track> root) {
  fbb.Finish(root);
}

}  // namespace rml

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_RML_H_
